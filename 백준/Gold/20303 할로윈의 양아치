# 베낭문제와 비슷
# python 으로 풀 시 시간초과 pypy3 로 풀시 3700ms 정도로 통과
import sys
from collections import deque
input = sys.stdin.readline
n, m, k = map(int, input().split())
candy = list(map(int, input().split()))
friend = [[] for _ in range(n)]
for _ in range(m):
    a, b = map(int, input().split())
    friend[a-1].append(b-1)
    friend[b-1].append(a-1)
visited = [0 for _ in range(n)]
arr = []
for i in range(n):
    if visited[i] == 0:
        temp = 0
        count = 1
        q = deque()
        q.append(i)
        visited[i] = 1
        temp += candy[i]
        while q:
            now = q.popleft()
            for j in friend[now]:
                if visited[j] == 0:
                    visited[j] = 1
                    q.append(j)
                    temp += candy[j]
                    count += 1
        arr.append((temp, count))

dp = [[0 for _ in range(k)] for _ in range(len(arr))]
for j in range(1, k):
    if j >= arr[0][1]:
        dp[0][j] = arr[0][0]
for i in range(1, len(arr)):
    for j in range(1, k):
        if j >= arr[i][1]:
            dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-arr[i][1]] + arr[i][0])
        else:
            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])
print(dp[-1][-1])
